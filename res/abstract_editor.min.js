! function () {
    "use strict";
    var e, t, n, i, a, o = -1 !== document.location.search.search(/[?&]debug([=&]|$)/),
        r = "0.77.75",
        l = {
            fileTypes: {},
            buttons: {}
        },
        s = {
            name: "Abstract Editor",
            version: "0.00.00",
            about: "",
            defaultEncoding: "undefined" != typeof arrTypes ? arrTypes.ಠ_ಠ : ""
        },
        d = null,
        c = {},
        u = function (e, t) {
            for (var n = e.length; n-- > 0;)("function" != typeof t || t(e[n])) && e[n].parentNode.removeChild(e[n])
        },
        f = function (e, t) {
            return localStorage && null !== (e = localStorage.getItem("AbstractEditor-" + l.name + "-" + e)) ? e : "undefined" != typeof t ? t : null
        },
        p = function (e, t) {
            localStorage && localStorage.setItem("AbstractEditor-" + l.name + "-" + e, t)
        },
        h = function (t) {
            var i = function () {
                    this.changedV = !0, e.textContent = "Detected change!"
                },
                o = function (e) {
                    var t, n, o = e.name + "-";
                    for (t in e.sections) e.sections.hasOwnProperty(t) && "undefined" == typeof e.sections[t].link && (n = a.appendChild(document.createElement("textarea")), n.wrap = "off", n.id = n.className = o + t, n.value = e.sections[t].hex, n.addEventListener("change", i.bind(e.sections[t]), !1))
                };
            "undefined" != typeof c[this] && y(this, !0);
            var r, s = {
                    name: this,
                    rawData: t.target.result,
                    sections: []
                },
                d = !1;
            for (var f in l.fileTypes)
                if (-1 !== s.name.search(l.fileTypes[f].fileMask)) {
                    e.textContent = "Parsing " + this + " as " + f + "...";
                    try {
                        r = l.fileTypes[f].parseFile(s)
                    } catch (e) {
                        e = e.message.replace(/[\.!,]$/, ";"), r = "Uncaught exception: " + e + (-1 === e.search(/;$/) ? ";" : "") + " Probably an invalid file!"
                    }
                    if ("string" == typeof r && 0 !== r.length) return e.textContent = "Parse function failed! " + r, !1;
                    s.type = f, d = !0;
                    break
                }
            return d ? (c[this] = s, u(document.getElementsByClassName(this)), o(s), d = n.appendChild(document.createElement("option")),  d.textContent = d.value = this, C({
                target: {value: this}}) && (e.textContent = "Loaded file " + this + "!"), void 0) : (e.textContent = "Unknown filetype!", void 0)
        },
        v = function (e) {
            e.stopPropagation(), e.preventDefault(), e = "undefined" == typeof e.dataTransfer ? e.target.files : e.dataTransfer.files;
            for (var t, n = -1, i = e.length; ++n < i;)("undefined" == typeof c[e[n].name] || confirm(e[n].name + " is already in the editor!")) && (t = new FileReader, t.onload = h.bind(e[n].name), t.readAsArrayBuffer(e[n]))
        },
        y = function (t, o) {
            return ("string" != typeof t || 0 === t.length) && (t = n.value), "undefined" == typeof c[t] ? (e.textContent = "No file to close!", void 0) : ((o || confirm("Are you sure you want to close file " + t + "?\nThis cannot be undone!")) && (delete c[t], u(i.children, function (e) {
                return "" !== e.value
            }), u(n.children, function (e) {
                return e.value === t
            }), t += "-", u(a.children, function (e) {
                return 0 === e.id.indexOf(t)
            }), n.value = ""), void 0)
        },
        g = function (t) {
            if (("string" != typeof t || 0 === t.length) && (t = n.value), "undefined" == typeof c[t]) return e.textContent = "No file to save!", void 0;
            try {
                "function" == typeof l.fileTypes[c[t].type].getData ? (e.textContent = "Creating new " + c[t].name + " as " + c[t].type + "...", saveAs(new Blob(l.fileTypes[c[t].type].getData(c[t]), {
                    type: "application/octet-binary"
                }), t)) : e.textContent = "Type " + c[t].type + " is read-only!"
            } catch (t) {
                e.textContent = "Failed to save: " + t.message, o && console.log(t)
            }
        },
        m = "",
        C = function (e) {
            if (0 === (e = e.target.value).length) return n.value = m, void 0;
            try {
                if (c[m].sections[b].changedV && !confirm("There are unsaved changes in this section!\nContinue and discard these changes?")) return n.value = m, void 0;
                c[e].sections[b].changedV = !1
            } catch (e) {}
            m = n.value = e, u(i.children, function (e) {
                return "" !== e.value
            });
            var t, a, o, r, l = c[e];
            for (t in l.sections)
                if (l.sections.hasOwnProperty(t) && "undefined" == typeof l.sections[t].link && (o || (o = t), a = i.appendChild(document.createElement("option")), a.textContent = a.value = t, "undefined" != typeof (t = l.sections[t].linked) && 0 !== t.length)) {
                    a.textContent += " [+";
                    for (r in t) a.textContent += t[r] + ",";
                    a.textContent = a.textContent.slice(0, -1) + "]"
                }
            w({
                target: {
                    value: o
                }
            }, l.name)
        },
        x = function (t, o) {
            ("string" != typeof t || 0 === t.length) && (t = i.value), o = o || n.value;
            var r, l;
            if (!(r = c[o]) || !(r = r.sections[t])) return e.textContent = "No section to close!", void 0;
            if (confirm("Are you sure you want to close section " + o + "-" + t + "?\nThis cannot be undone!")) {
                for (l = r.linked ? r.linked.length : 0; --l >= 0;) delete c[o].sections[r.linked[l]];
                delete c[o].sections[t];
                var s = c[o].sections;
                r = 0;
                for (l in s)
                    if (s.hasOwnProperty(l)) {
                        ++r;
                        break
                    }
                if (0 === r) return y(o, !0), void 0;
                u(i.children, function (e) {
                    return e.value === t
                }), l = o + "-" + t, u(a.children, function (e) {
                    return 0 === e.id.indexOf(l)
                });
                for (l in i.children)
                    if (i.children.hasOwnProperty(l) && i.children[l].value) {
                        l = i.children[l].value;
                        break
                    }
                l ? w({
                    target: {
                        value: l
                    }
                }, o) : i.value = ""
            }
        },
        E = function (t, a) {
            ("string" != typeof t || 0 === t.length) && (t = i.value), a = a || n.value;
            var o;
            if (!(o = c[a]) || !(o = o.sections[t])) return e.textContent = "No section to save!", void 0;
            var r = document.getElementById(a = a + "-" + t);
            if (!r) return e.textContent = 'Failed to find textbox "' + a + '"', !1;
            var l = Array.filter(document.getElementsByName("fileView"), function (e) {
                return e.checked
            });
            if (l.length < 1) return !1;
            switch (l = l[0], l.value.toLowerCase()) {
            case "text":
                L(r.value, document.getElementById("fileView-" + l.value).value, o);
                break;
            default:
                o.hex = r.value
            }
            o.changed = o.changedC = !0, o.changedV = !1, e.textContent = "Saved section " + a + " internally!"
        },
        b = "",
        w = function (a, o) {
            if ("" === a.target.value || isNaN(a = 1 * a.target.value)) return i.value = b, !1;
            0 > a && (a = 0 | i.options[1].value), o = o || n.value;
            var r = document.getElementById(o + "-" + a);
            if (!r) return e.textContent = 'Failed to find textbox "' + o + "-" + a + '"', !1;
            try {
                if (c[o].sections[b].changedV && !confirm("There are unsaved changes in this section!\nContinue and discard these changes?")) return i.value = b, void 0;
                c[o].sections[b].changedV = !1
            } catch (e) {}
            d && (d.style.display = "none"), (d = r).style.display = "block", b = i.value = a;
            try {
                (r = c[o].sections[a]).linebreaks && (t.textContent = "Original # of lines: " + r.linebreaks), r = r.changedV === !0 ? "Changed" : "Saved"
            } catch (e) {
                r = "Unknown State"
            }
            return S(), e.textContent = "Swaped to file " + o + "-" + a + " [" + r + "]", !0
        },
        T = function (e, t, n) {
            e = e.split("\n");
            var i, a, o, r, l = arrTypes[n.value],
                s = l.cmdLen,
                d = "function" == typeof s,
                c = "",
                u = e.length,
                f = 0,
                h = 0;
            for (p("lastActive", n.value); --u >= 0;)
                if ((i = e.splice(0, 1)[0]) && !(i.length < 2) && "#" !== i[0]) {
                    for (a = (i = i.split(" ")).length; --a >= 0;)
                        if ((o = i.splice(0, 1)[0]) && !(-1 === o.search(/^(?:0x)?([0-9A-Fa-f]{1,2})$/) | isNaN(o = parseInt(o, 16))))
                            if (0 === f)
                                if (h > 0)--h, c += "{0x" + ("0" + RegExp.$1.toUpperCase()).slice(-2) + "}";
                                else {
                                    if ("string" == typeof (r = l[o])) c += r;
                                    else if (r instanceof Array) c += r.length > 1 && r[1] !== !1 ? r[1] : "{0x" + ("0" + RegExp.$1.toUpperCase()).slice(-2) + "}";
                                    else {
                                        if ("object" == typeof r) {
                                            f = o;
                                            continue
                                        }
                                        c += "{0x" + ("0" + RegExp.$1.toUpperCase()).slice(-2) + "}"
                                    }
                                    d && (h = s(o, i))
                                } else c += "string" == typeof l[f][o] ? l[f][o] : l[f][o] instanceof Array && l[f][o].length > 1 && l[f][o][1] !== !1 ? l[f][o][1] : "{0x" + ("0" + f.toString(16)).slice(-2) + "}{0x" + ("0" + RegExp.$1.toUpperCase()).slice(-2) + "}", f = 0;
                    h = 0, 0 !== f && (c += "{0x" + ("0" + f.toString(16).toUpperCase()).slice(-2) + "}"), 0 !== u && (c += "\n")
                }
            t.value = c
        },
        k = function (e, t, n) {
            for (var i in e)
                if (!isNaN(i))
                    if (e[i |= 0] instanceof Array) {
                        if (!(e[i].length > 1 && e[i][1] !== !1)) continue;
                        t[e[i][1]] = (n || "") + ("0" + i.toString("16")).slice(-2)
                    } else "object" == typeof e[i] ? k(e[i], t, (n || "") + ("0" + i.toString("16")).slice(-2) + " ") : t[e[i]] = (n || "") + ("0" + i.toString("16")).slice(-2)
        },
        A = function (e) {
            if ("object" != typeof window.arrTypesR) window.arrTypesR = {};
            else if ("object" == typeof window.arrTypesR[e]) return window.arrTypesR[e];
            var t = window.arrTypesR[e] = {};
            return k(window.arrTypes[e], t, ""), t
        },
        L = function (e, t, n) {
            e = e.split("\n");
            for (var i, a, o, r = A(t), l = "", s = e.length, d = !1, c = []; --s >= 0;)
                if (i = e.splice(0, 1)[0]) {
                    for (a = (i = i.split("")).length; --a >= 0;)
                        if (o = i.splice(0, 1)[0]) {
                            if ("string" == typeof d) {
                                if ("}" !== o) {
                                    d += o;
                                    continue
                                }
                                o = d + "}", d = !1
                            } else if ("{" === o) {
                                d = "{";
                                continue
                            }
                            if ("string" == typeof r[o]) l += r[o].toUpperCase() + (0 === a ? "" : " ");
                            else {
                                if (!(o.length > 2 && -1 !== o.search(/^\{0x([0-9A-Fa-f]{1,2})\}$/))) {
                                    c.push(o);
                                    continue
                                }
                                l += ("0" + RegExp.$1.toUpperCase()).slice(-2) + (0 === a ? "" : " ")
                            }
                        }
                    0 !== s && (l += "\n")
                }
            0 !== c.length && alert("Unsupported characters skipped: " + c.filter(function (e, t) {
                return c.indexOf(e) === t
            }).join(", ")), n.hex = l
        },
        S = function () {
            var t = Array.filter(document.getElementsByName("fileView"), function (e) {
                    return e.checked
                }),
                a = i.value,
                o = n.value,
                r = c[o],
                l = document.getElementsByClassName("fileViewA"),
                s = l.length;
            if (t.length < 1 || !r || !(r = r.sections[a])) return t[0].checked = !1, !1;
            for (t = t[0]; --s >= 0;) l[s].style.display = "none";
            if ((l = document.getElementById("fileView-" + t.value)) && (l.style.display = "inline"), !(s = document.getElementById(o = o + "-" + a))) return e.textContent = 'Failed to find textbox "' + o + '"', !1;
            switch (t.value.toLowerCase()) {
            case "text":
                T(r.hex, s, l);
                break;
            default:
                s.value = r.hex
            }
            p("lastType", t.value.toLowerCase())
        },
        main = function () {
            var o;
            for (o in s) "undefined" == typeof l[o] && (l[o] = s[o]);
            if (l.defaultEncoding = f("lastActive", l.defaultEncoding), document.title = l.name + " v" + l.version + " ~ " + document.title, null !== (o = document.getElementById("tplpagename")) && (o.textContent = l.name), e = document.getElementById("status") || {}, e.innerHTML = "Loading...", "function" != typeof Array.filter) {
                if ("function" != typeof Array.prototype.filter) return e.innerHTML = "Array.filter is not supported! This is an issue with your browser!", void 0;
                Array.filter = function (e, t) {
                    return Array.prototype.filter.call(e, t)
                }
            }
            if ("undefined" == typeof window.File) return e.innerHTML = "File API not supported! This is an issue with your browser!", void 0;
            if ("function" != typeof window.jDataView) return e.innerHTML = "jDataView failed to load!", void 0;
            if ("function" != typeof window.saveAs) return e.innerHTML = "FileSaver failed to load!", void 0;
            var u, p, h = document.getElementById("body") || document.body,
                m = document.createElement("div");
            if (m.id = "fileUpload", m.addEventListener("drop", v, !1), m.addEventListener("dragover", function (e) {
                e.stopPropagation(), e.preventDefault(), e.dataTransfer.dropEffect = "copy"
            }, !1), h.appendChild(m), n = m.appendChild(document.createElement("select")), n.addEventListener("change", C, !1), o = n.appendChild(document.createElement("option")), o.textContent = "Files...", o.value = "", i = m.appendChild(document.createElement("select")), i.addEventListener("change", w, !1), o = i.appendChild(document.createElement("option")), o.textContent = "Sections...", o.value = "", m.appendChild(document.createTextNode("Open file: ")), o = m.appendChild(document.createElement("input")), o.type = "file", o.multiple = !0, o.addEventListener("change", v, !1), o = m.appendChild(document.createElement("input")), o.type = "button", o.value = "Save file", o.addEventListener("click", g, !1), o = m.appendChild(document.createElement("input")), o.type = "button", o.value = "Save section", o.addEventListener("click", E, !1), o = m.appendChild(document.createElement("input")), o.type = "button", o.value = "Close file", o.addEventListener("click", y, !1), o = m.appendChild(document.createElement("input")), o.type = "button", o.value = "Close section", o.addEventListener("click", x, !1), o = m.appendChild(document.createElement("div")), o.style.cssText = "display:inline-block;", u = m.appendChild(document.createElement("input")), u.type = "button", u.value = "About", u.addEventListener("click", function () {
                var e = l.name + " v" + l.version + "\nAbsEditor v" + r + "\nUsing font Mapping v" + arrTypesVER + "\nSupported files:\n";
                for (var t in l.fileTypes) e += "  " + t + "  [" + (t = l.fileTypes[t]).fileMask.toString().replace(/(?:^\/\^?|\$?\/[^\/]*$)/g, "") + "] (" + ("function" == typeof t.parseFile ? "read" + ("function" == typeof t.getData ? "-write" : "") : "ERROR") + ")\n";
                e += 'Usage:\n  The "Files..." dropdown selects the current file out of all opened files\n  The "Section..." dropdown selects the current section from the current file\n  "Open file" open a file to work with\n  "Save file" makes a new file from saved sections\n  "Save section" saves changes made in the textbox\n      Sections must be saved to keep changes!\n  "Close file" closes the current file completely\n  "Close section" closes the current section\n      Closed sections use the original on save\n  "Hex" or "Text" changes how the textbox is shown\n      When changed, it uses the last saved state of the section!', "string" == typeof l.about && l.about.length > 0 && (e += "\n\n" + l.about), alert(e)
            }, !1), -1 !== document.location.search.search(/[?&]advanced([=&]|$)/)) {
                u = m.appendChild(document.createElement("input")), u.type = "button", u.value = "Get Mass Code", u.setAttribute("data-advanced", ""), u.addEventListener("click", function () {
                    var e = i.options.length - 1,
                        t = 0,
                        n = "";
                    for (w({
                        target: {
                            value: -1
                        }
                    }); e > t;) n += d.value + "\n\n", ++t !== e && w({
                        target: {
                            value: i.options[i.selectedIndex + 1].value
                        }
                    });
                    window.open("data:text/plain;charset=utf-8," + encodeURIComponent(n))
                }, !1), u = m.appendChild(document.createElement("input")), u.type = "button", u.value = "Set with Mass Code", u.setAttribute("data-advanced", ""), u.addEventListener("click", function () {
                    var e = prompt('Enter a code with each section seperated by "\\n", no linebreaks').split("\\n"),
                        t = Math.min(e.length, i.options.length - 1),
                        n = 0;
                    for (w({
                        target: {
                            value: -1
                        }
                    }); t > n;) 0 !== e[n].length && (d.value = e[n], E()), ++n !== t && w({
                        target: {
                            value: i.options[i.selectedIndex + 1].value
                        }
                    })
                }, !1), u = m.appendChild(document.createElement("input")), u.type = "button", u.value = "Statistics", u.setAttribute("data-advanced", ""), u.addEventListener("click", function () {
                    var t, a = i.value,
                        o = n.value;
                    if (!(t = c[o]) || !(t = t.sections[a])) return e.textContent = "No section to check statistics for!", void 0;
                    var r = document.getElementById(o = o + "-" + a);
                    return r ? (alert("Statistics for the current section (last saved state)\n" + r.value.split("\n").length + " lines\n" + t.hex.match(/(?:0x)?[0-9A-Fa-f]{1,2}/gi).length + " characters"), void 0) : (e.textContent = 'Failed to find textbox "' + o + '"', !1)
                }, !1);
                for (p in l.buttons) "function" == typeof l.buttons[p] && (u = m.appendChild(document.createElement("input")), u.type = "button", u.value = p, u.setAttribute("data-advanced", "custom"), u.addEventListener("click", function (t) {
                    l.buttons[this].call(t, e, d)
                }.bind(p), !1))
            }
            if (u = o.appendChild(document.createElement("input")), u.type = "radio", u.name = "fileView", u.value = "hex", u.setAttribute("checked", "checked"), u = o.appendChild(document.createElement("label")).appendChild(u).parentNode, u.innerHTML += "Hex", u.addEventListener("change", S, !1), arrTypes) {
                u = o.appendChild(document.createElement("input")), u.type = "radio", u.name = "fileView", u.value = "text", "text" === f("lastType") && u.setAttribute("checked", "checked"), u = o.appendChild(document.createElement("label")).appendChild(u).parentNode, u.innerHTML += "Text", u.addEventListener("change", S, !1), u = o.appendChild(document.createElement("select")), u.className = "fileViewA", u.id = "fileView-text", u.style.display = "none";
                for (o in arrTypes) "ಠ_ಠ" !== o && (m = u.appendChild(document.createElement("option")), arrTypes[o] === !1 ? (m.textContent = "—————————————", m.disabled = !0) : (m.textContent = o, l.defaultEncoding === o && (m.selected = !0)));
                u.addEventListener("change", S, !1)
            }
            t = {}, a = document.createElement("div"), a.id = "fileView", h.appendChild(a), e.textContent = "Loaded!"
        };
    window.AbstractEditor = {
        DEBUG_global_fileList: c,
        init: main,
        settings: l
    }
}();